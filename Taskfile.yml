version: '3'
#output: prefixed
env:
  SKIP_QUOTA_CHECK: true
  WAF_TEST: false
  CREATE_DIAGRAM: false
  TOOL_KIT_STACKNAME: CDKToolkit
  LASTEST_FIREWALLFACTORY_VERSION:
    sh: curl --silent "https://api.github.com/repos/globaldatanet/aws-firewall-factory/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'
vars:
  prerequisite:
  config: # without .json
  REGION:
    sh: echo $AWS_REGION
  CDK_DEFAULT_ACCOUNT:
    sh: aws sts get-caller-identity |jq -r .
tasks:
  destroy:
    desc: Destroy Stack
    cmds:
      - task: cdkdestroy
  deploy:
    desc: Deploy Stack
    cmds:
      - task: cdkdeploy
      - task: creatediagram
  synth:
    desc: synth Stack
    cmds:
      - cdk synth
    vars:
      ACCOUNT:
        sh: aws sts get-caller-identity |jq -r .Account
      TAGS:
        sh: cat tags/tags.json | jq -j '.[]|"--tags " + (.Key)+"="+(.Value)+" "'
    env:
      PROCESS_PARAMETERS: .config
  diff:
    desc: CDK Diff
    cmds:
      - cdk diff --toolkit-stack-name {{.TOOL_KIT_STACKNAME}}
    silent: true
    interactive: true
    env:
      PROCESS_PARAMETERS: "{{.config}}"
      PREREQUISITE: "{{.prerequisite}}"
  cdkdestroy:
    desc: CDK Destroy
    cmds:
      - cdk destroy --require-approval never --force
    vars:
      ACCOUNT:
        sh: aws sts get-caller-identity |jq -r .Account
    env:
      PROCESS_PARAMETERS: "{{.config}}"
      PREREQUISITE: "{{.prerequisite}}"
    silent: true
    interactive: true
  cdkdeploy:
    desc: CDK Deploy
    cmds:
      - DOCKER_BUILDKIT=1 cdk deploy --require-approval never {{.TAGS}} --toolkit-stack-name {{.TOOL_KIT_STACKNAME}}
    vars:
      ACCOUNT:
        sh: aws sts get-caller-identity |jq -r .Account
      TAGS:
        sh: cat tags/tags.json | jq -j '.[]|"--tags " + (.Key)+"="+(.Value)+" "'
    env:
      PROCESS_PARAMETERS: "{{.config}}"
      PREREQUISITE: "{{.prerequisite}}"
    silent: true
    interactive: true
  creatediagram:
    desc: Create Diagram
    cmds:
      - if [[ {{.CREATE_DIAGRAM}} = true ]] ; then echo ü§≥üèª $(cfn-dia draw.io -t cdk.out/"$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Prefix')-WAF-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.WebAcl.Name')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Stage')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.DeployHash')".template.json --output-file $(sed "s/values/diagrams/g;s/.json/.drawio/g" <<< values/{{.config}}.json) --ci-mode --skip-synth); else echo ‚è≠   Skipping Diagram generation ü§≥üèª ; fi
    silent: true
    env:
      PROCESS_PARAMETERS: values/{{.config}}.json
  testwaf:
    desc: Test of your waf using GoTestWAF
    cmds:
      - echo üß™  Testing of your new üî• WAF using GoTestWAF
      - mkdir -p ./waf-evaluation-report/$(date '+%Y-%m-%d')
      - |
        items=$(ts-node ./gotestwaf/gotestwaf.ts | jq -r '.[] | .SecuredDomain[]?')
        for item in ${items[@]}; do
            echo "Using fqdn in üñ•  url : $item"
            ./gotestwaf/gotestwaf --url https://$item --workers 50 --blockConnReset  --wafName="$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Prefix')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.WebAcl.Name')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Stage')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.DeployHash')" --configPath=./gotestwaf/config.yaml --testCasesPath=./gotestwaf/testcases --skipWAFBlockCheck --reportPath "./waf-evaluation-report/$(date '+%Y-%m-%d')" --reportName "$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Prefix')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.WebAcl.Name')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.Stage')-$(ts-node ./gotestwaf/gotestwaf.ts| jq -r '.General.DeployHash')"
        done
    silent: true
    env:
      PROCESS_PARAMETERS: "{{.config}}"
    preconditions:
      - sh: "[ '{{.WAF_TEST}}' != 'true' ]"
        msg: ‚è≠  Skipping WAF Testing üß™
  generate-waf-skeleton:
    desc: Generate Skeleton
    silent: true
    cmds:
      - ts-node ./lib/tools/generate-skeleton.ts